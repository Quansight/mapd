# Note: there are many handy hints in comments in this example -- remove them when you've finalized your recipe

# Jinja variables help maintain the recipe as you'll update the version only here.
{% set name = "mapd-core-cpu" %}
{% set version = "3.6.0" %}
{% set sha256 = "402140dc5189f6b7bd82bd8c551040981131f6eb79745031521b4fe77310aaab" %}
# sha256 is the prefered checksum -- you can get it for a file with:
#  `openssl sha256 <file name>`.
# You may need the openssl package, available on conda-forge
#  `conda install openssl -c conda-forge``

package:
  name: {{ name|lower }}
  version: {{ version }}

source:
  # fn: {{ name }}-latest-{{ pkg_type }}.tar.gz
  url: https://github.com/mapd/mapd-core/archive/v{{ version }}.tar.gz
  # If getting the source from GitHub remove the line above
  # uncomment the line below and modify as needed
  # url: https://github.com/simplejson/{{ name }}/archive/{{ version }}.tar.gz
  sha256: {{ sha256 }}

build:
  # Uncomment the following line if the package is pure python and the recipe is exactly the same for all platforms.
  # It is okay if the dependencies are not built for all platforms/versions, although selectors are still not allowed.
  # See https://conda-forge.org/docs/meta.html#building-noarch-packages for more details.
  # noarch: generic
  number: 0
  # If the installation is complex, or different between Unix and Windows, use separate bld.bat and build.sh files instead of this key.
  # By default, the package will be built for the Python versions supported by conda-forge and for all major OSs.
  # Add the line "skip: True  # [py<35]" (for example) to limit to Python 3.5 and newer, or "skip: True  # [not win]" to limit to Windows.
  skip: True  # [not linux]
#  script: python -m pip install --no-deps --ignore-installed .

requirements:
  build:
    - clangdev
    - cmake
    - llvmdev
    - go
    - boost
    - openjdk
    - gperftools
    - gdal
    - arrow
    - glog
    - thrift
    - thrift-cpp
    - blosc
    # if your project compiles code (such as a C extension) then add `toolchain` as a build requirement.
    - toolchain
  run:
    - llvmdev
    - go
    - boost
    - openjdk
    - gperftools
    - gdal
    - arrow

test:
  # Some package might need a `test/commands` key to check CLI.
  # List all the packages/modules that `run_test.py` imports.
  commands:
    - conda inspect linkages -p $PREFIX $PKG_NAME  # [not win]
    - conda inspect objects -p $PREFIX $PKG_NAME  # [osx]
 
about:
  home: https://www.mapd.com/
  # Remember to specify the license variants for BSD, Apache, GPL, and LGLP.
  # Prefer the short version, e.g: GPL-2.0 instead of GNU General Public License version 2.0
  # See https://opensource.org/licenses/alphabetical
  license: Apache-2.0
  # The license_family, i.e. "BSD" if license is "BSD-3-Clause". (optional)
  license_family: Apache
  # It is strongly encouraged to include a license file in the package,
  # (even if the license doesn't require it) using the license_file entry.
  # See http://conda.pydata.org/docs/building/meta-yaml.html#license-file
  license_file: LICENSE.md
  summary: 'The MapD Core database'

  # The remaining entries in this section are optional, but recommended
  description: |
    MapD Core is an in-memory, column store, SQL relational database 
    that was designed from the ground up to run on GPUs.
  doc_url: https://www.mapd.com/docs/
  dev_url: https://github.com/mapd/mapd-core

extra:
  recipe-maintainers:
    # GitHub IDs for maintainers of the recipe.
    # Always check with the people listed below if they are OK becoming maintainers of the recipe. (There will be spam!)
    - xmnlab
    - teoliphant
